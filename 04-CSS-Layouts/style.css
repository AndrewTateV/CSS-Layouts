/* box-sizing: border-box; 是 CSS 中的一个属性，用来改变元素计算宽高的方式。这个属性在网页布局中非常常用，因为它能让元素在调整 padding 和 border 时不会改变总尺寸，便于布局设计。 */

* {
  /* border-top: 10px solid #1098ad; */
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* PAGE SECTIONS */
body {
  color: #444;
  font-family: sans-serif;

  border-top: 10px solid #1098ad;
  position: relative;
}

.container {
  width: 1200px;
  /* margin-left: auto;
  margin-right: auto; */
  margin: 0 auto;
}

.main-header {
  background-color: #f7f7f7;
  /* padding: 20px;
  padding-left: 40px;
  padding-right: 40px; */
  padding: 20px 40px;
  margin-bottom: 60px;
  /* height: 80px; */
}

nav {
  font-size: 18px;
  /* text-align: center; */
}

article {
  margin-bottom: 60px;
}

.post-header {
  margin-bottom: 40px;
  /* position: relative; */
}

aside {
  background-color: #f7f7f7;
  border-top: 5px solid #1098ad;
  border-bottom: 5px solid #1098ad;
  /* padding-top: 50px;
  padding-bottom: 50px; */
  padding: 50px 40px;
  /* width: 500px; */
  
}

/* SMALLER ELEMENTS */
h1,
h2,
h3 {
  color: #1098ad;
}

h1 {
  font-size: 26px;
  text-transform: uppercase;
  font-style: italic;
}

h2 {
  font-size: 40px;
  margin-bottom: 30px;
}

h3 {
  font-size: 30px;
  margin-bottom: 20px;
  margin-top: 40px;
}

h4 {
  font-size: 20px;
  text-transform: uppercase;
  text-align: center;
  margin-bottom: 30px;
}

p {
  font-size: 22px;
  line-height: 1.5;
  margin-bottom: 15px;
}

ul,
ol {
  margin-left: 50px;
  margin-bottom: 20px;
}

li {
  font-size: 20px;
  margin-bottom: 10px;
  /* display: inline; */
}

li:last-child {
  margin-bottom: 0;
}

/* footer p {
  font-size: 16px;
} */

/* article header p {
  font-style: italic;
} */

#author {
  font-style: italic;
  font-size: 18px;
}

#copyright {
  font-size: 16px;
}

.related-author {
  font-size: 18px;
  font-weight: bold;
}

/* ul {
  list-style: none;
} */

.related {
  list-style: none;

  margin-left: 0;
}

body {
  /* background-color: orangered; */
}

/* .first-li {
  font-weight: bold;
} */

li:first-child {
  font-weight: bold;
}

li:last-child {
  font-style: italic;
}

li:nth-child(even) {
  /* color: red; */
}

/* Misconception: this won't work! */
article p:first-child {
  color: red;
}

/* Styling links */
a:link {
  color: #1098ad;
  text-decoration: none;
}

a:visited {
  /* color: #777; */
  color: #1098ad;
}

a:hover {
  color: orangered;
font-weight: bold;
  text-decoration: underline orangered;
}

a:active {
  background-color: black;
  font-style: italic;
}
/* LVHA */

.post-img {
  width: 100%;
  height: auto;
}

nav a:link {
  /* background-color: orangered;
  margin: 20px;
  padding: 20px;

  display: block; */

  margin-right: 30px;
  /* margin-top: 10px; */
  display: inline-block;
}

nav a:link:last-child {
  margin-right: 0;
}

button {
  font-size: 22px;
  padding: 20px;
  cursor: pointer;

  position: absolute;
  /* top: 50px;
  left: 50px; */
  bottom: 50px;
  right: 50px;
}

h1::first-letter {
  font-style: normal;
  margin-right: 5px;
}

h3 + p::first-line {
  /* color: red; */
}

h2 {
  /* background-color: orange; */
  position: relative;
}

h2::before {
  content: "TOP";
  background-color: #ffe70e;
  color: #444;
  font-size: 16px;
  font-weight: bold;
  display: inline-block;
  padding: 5px 10px;
  position: absolute;
  top: -10px;
  right: -25px;
}

/* Resolving conflicts */
/* #copyright {
  color: red;
}

.copyright {
  color: blue;
}

.text {
  color: yellow;
}

footer p {
  color: green !important;
} */

/* nav a:link,
nav p {
  font-size: 18px;
} */












/* 浮动布局（Float Layout）是网页布局的一种传统方式，通过使用CSS的float属性让元素在容器内浮动，实现元素并排显示。虽然现在更现代的布局方式（如Flexbox和Grid布局）逐渐取代了浮动布局，但在处理一些特定的响应式设计或者旧项目时，浮动布局仍然有一定的使用价值。

基本的浮动布局
CSS浮动属性：可以对div、img等元素应用float属性。

float: left;：元素向左浮动，紧贴容器左边。
float: right;：元素向右浮动，紧贴容器右边。
清除浮动：浮动布局可能会造成父级容器高度塌陷，影响其他内容的布局，通常需要清除浮动来避免这种情况。 */








/* .author-img{
float: left;
margin-bottom: 20px;
} */

/* 没加float前，从前面.author-img图片开始计算，加了float以后，就是从图像右侧开始加  说明float后 脱离了标准文档流 flow*/
/* .author{
 
float: left;
margin-top: 10px;
margin-left: 20px;

} */



/* collapsing elements */
/* 为什么这样操作以后 他的父容器变小了？ 
因为 子元素float脱离文档流了
父亲容器 .main-header 只剩下前面设置好的padding了
要是去除padding 父容器background-color直接消失，因为子元素也就是content脱离文档流了消失了  */
/* h1{
float: left;

}

nav{
  float: right;
}
 */




/* 解决方法  */

/* .clear{
  clear: both;
}
 */

/* 方法2 更好 */

/* .clearfix::after{
 content: '';
 display: block;
 clear: both;
}




article{

  float: left;
  width: 825px;
}

aside{
  float: right;
  width: 300px;
}

footer{
  clear: both;
}

 */





 /* flexbox布局 */

.main-header{
  display: flex;
  align-items:center;
  justify-content:space-between
 
}
/* .navv{

  grid-row: 1;
  grid-column: 2;
} */



.jb{
  display:flex;
  align-items:center;
  margin-bottom: 15px;
 

  /* display: grid;
  align-content:center;
  justify-content: start;
  column-gap: 20px;
   */

}

.author{
  margin-left: 20px;
  margin-bottom: 0;
  /* grid-row: 1;
  grid-column: 2; */
  
}

.related-post{
 display: flex;
  align-items:center;
  gap:20px;
  margin-bottom: 30px;
  
}

/* 为什么要用display：block 
因为anchor是inline margin-bottom不起作用 */
.related-link:link,.related-link:visited{
font-style: normal;
font-weight: bold;
font-size: 17px;
display: block;
margin-bottom: 5px;

}
.related-author{
  margin-bottom: 0;
  font-size: 14px;
  font-weight: normal;
  font-style: italic;
}

.totall{
  display: flex;
  gap: 75px;


}

article{
  flex:1;
}

aside{
align-self: flex-start;
  flex:0 0 300px
}


/* 使用css grid */

.container{
display: grid;
grid-template-areas:
"header header"
"content sidebar"
"content        "
"footer footer";
grid-template-columns: 1fr 300px;
column-gap: 75px;

}

.main-header{
grid-column: 1/-1;

}

footer {
  grid-column: 1 / -1;
}


aside{


}